extern crate num_bigint;
use num_bigint::{ToBigUint};
use num_bigint::BigUint;

fn magic(mut state:BigUint, a: u8, b: u8, p: BigUint, rounds: BigUint) -> BigUint{
  let mut i = 0.to_biguint().unwrap();
  while i < rounds {
    state = ((state * a) + b) % &p;
    i = i + 1_u8
  }
  state
}

fn main() {
    let p = BigUint::parse_bytes(b"48569718278242303506230209619975923780743060131772701186017298107559924284242635979759825505782161830376129653325924722665978898131985179210937191151223888128070809835310745199785794930057364029265229452480206055255713317889077410854999087437697415991657128058495524746236464800864688806069056279502078609163", 10).unwrap();
    let state = BigUint::parse_bytes(b"21168651249892365486136418125726362865327546384637160303310624426991883020070096339748008613139669972987435197171828010807801735363313790068442787546235698438618519181810304746021912309785611083417111013075787209062958230479598507954803956586021189590329762702913302100337042009595481240883581225904761204891", 10).unwrap();
    let rounds = &p >> 3;
    let a = 2 as u8;
    let b = 3 as u8;
    println!("Flag: {}", magic(state, a, b, p, rounds));

}
