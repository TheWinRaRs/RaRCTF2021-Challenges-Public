from Crypto.Util.number import long_to_bytes

def optimizedlcg(b, p, state, rounds): # optimized LCG where a = 2
  state = pow(2,rounds,p) * state + b * (pow(2,rounds,p) - 1)
  return state

p = 48569718278242303506230209619975923780743060131772701186017298107559924284242635979759825505782161830376129653325924722665978898131985179210937191151223888128070809835310745199785794930057364029265229452480206055255713317889077410854999087437697415991657128058495524746236464800864688806069056279502078609163
a = 2
b = 3
rounds = p >> 3
state = 21168651249892365486136418125726362865327546384637160303310624426991883020070096339748008613139669972987435197171828010807801735363313790068442787546235698438618519181810304746021912309785611083417111013075787209062958230479598507954803956586021189590329762702913302100337042009595481240883581225904761204891
print(long_to_bytes(optimizedlcg(b,p,state,rounds) % p).decode())
