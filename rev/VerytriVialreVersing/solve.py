from z3 import *

s = Solver()
target = [0x98, 0x69, 0x98, 0x67, 0x9e, 0x64, 0x9f, 0x77, 0xad, 0x65, 0x76, 0x76, 0xb2, 0x69, 0x9e, 0x73, 0xa9, 0x57, 0xb4, 0x23, 0x9e, 0x77, 0xb3, 0x92, 0xa9, 0x58, 0xae, 0x2d, 0x59, 0x65, 0xa8, 0x15, 0x59, 0x21, 0xad, 0x66, 0xa5]
flag = [BitVec("flag_%s" % i, 8) for i in range(0, len(target))]

for c in flag:
    s.add(c >= 0x20)
    s.add(c <= 0x7f)

key = [0x13, 0x37]

for i in range(len(target)):
    s.add((flag[i] ^ key[0]) + key[1] == target[i])
    key = key[::-1]

print(s.check())
model = s.model()
print(''.join([chr(model.eval(i).as_long()) for i in flag]))
