from Crypto.Util.number import long_to_bytes
from Crypto.Cipher import AES
from hashlib import sha224
from binascii import unhexlify

p =  148982911401264734500617017580518449923542719532318121475997727602675813514863
g =  2
y =  99943368625476277151400768907519717344447758596311103260066302523387843692499
data = [(82164720827627951718117576622367372918842412631288684063666489980382312886875, 20555462814568596793812771425415543791560033744700837082533238767135),
(121728190859093179709167853051428045020048650314914045286511335302789797110644, 18832686601255134631820635660734300367214611070497673143677605724980),
(70503066417308377066271947367911829721247208157460892633371511382189117698027, 18679076989831101699209257375687089051054511859966345809079812661627),
(129356717302185231616252962266443899346987025366769583013987552032290057284641, 2084781842220461075274126508657531826108703724816608320266110772897)]
ss = []
es = []
# k - x*e - s = 0 mod p
q = p//2
for i in range(len(data)):
    ss.append(data[i][0] * pow(2,-96,q))
    es.append(data[i][1] * pow(2,-96,q))


news = []
newe = []
for i in range(3):
    news.append(int(ss[i] - ss[i+1]))
    newe.append(int(es[i] - es[i+1]))

# We have three things where 
# 2^160 - e*x - s = 0 mod p
# Perfect HNP scenario!

# Let's just do standard HNP lattice thing lol
B = 2^160
M = matrix(QQ, 5, 5)
for i in range(3):
    M[i,i] = q

for i in range(3):
    M[4, i] = news[i]
    M[3, i] = newe[i]

    M[3, 3] = QQ(B)/QQ(q)
M[4, 4] = QQ(B)
M = (M.LLL())
d =  int(M[1][-2] * q/B) % p
# Note, you might need to add q
d = int(d) + p//2
print "privkey =", d
key = sha224(long_to_bytes(d)).digest()[:16]
iv = unhexlify("563391612e7c7d3e6bd03e1eaf76a0ba")
ct = unhexlify("e426c232b20fc298fb4499a2fff2e248615a379c5bc1a7447531f8a66b13fb57e2cf334247a0589be816fc52d80c064b61fa60261e925beb34684655278955e0206709f95173ad292f5c60526363766061e37dd810ee69d1266cbe5124ae18978214e8b39089b31cad5fd91b9a99e344830b76d456bbf92b5585eebeaf85c990")

cipher = AES.new(key, AES.MODE_CBC, iv)
print(cipher.decrypt(ct))
